generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//actors

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userName String
  email String
  password String
  phone String
  parties Party[]
  vendors Vendor[]
  drivers Driver[]
  trucks Truck[]
  trips Trip[]
}

model Party{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
  userId  String     @db.ObjectId
  name String
  phone String
  openingBalance Float
  openingBalanceDate DateTime 
  totalBalance Float
  trips Trip[]
  gstNumber String?
  PANNumber String?
  companyName String?
  transactions PartyTransaction[]
}

model Vendor {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
  userId  String     @db.ObjectId
  name    String
  email   String
  phone   String
  totalBalance Float
  trips   Trip[]
  trucks  Truck[]
  transactions VendorTransaction[]
  @@index([name])
}

model Driver{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
  userId  String     @db.ObjectId
  name String
  phone String
  status DriverStatus
  balance Float
  trips Trip[]
  truck Truck?
  transactions DriverTransaction[]
}

model Truck{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
  userId  String     @db.ObjectId
  registrationNumber String
  truckType TruckType
  truckOwnerShip TruckOwnership
  driver Driver @relation(fields: [driverId], references: [id])
  driverId String @unique @db.ObjectId
  vendor Vendor @relation(fields: [vendorId], references: [id])
  vendorId String @unique @db.ObjectId
  trips Trip[]
  status TruckStatus
}


//entities

model PartyTransaction{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  party Party @relation(fields: [partyId], references: [id])
  partyId String @db.ObjectId
  amount Float
  transactionType TripTransactionType
  transactionDate DateTime
  transactionMode TransactionMode
  transactionDescription String
}

model VendorTransaction{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  vendor Vendor @relation(fields: [vendorId], references: [id])
  vendorId String @db.ObjectId
  amount Float
  transactionType ExpenseType
  transactionDate DateTime
  transactionMode TransactionMode
  transactionDescription String
}

model DriverTransaction{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  driver Driver @relation(fields: [driverId], references: [id])
  driverId String @db.ObjectId
  amount Float
  driverBalance Float
  transactionType TransactionType
  transactionDate DateTime
  transactionMode TransactionMode
  transactionDescription String
}

model Address {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  doorNumber String
  street   String
  city     String
  state    String
  zipCode  String
}

model Trip {
  //tripDetails
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  status    TripStatus
  from      String
  to        String
  partyFreightAmount Float
  revenue Float
  partyBalance Float
  vendorBalance Float?
  totalExpenseAmount Float
  profit Float
  
  lrNumber String?
  material String?
  notes String?
  startKMSReadings Float?
  endKMSReadings Float?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  completedAt DateTime?
  startedAt DateTime?

  //references to other models
  vendor    Vendor     @relation(fields: [vendorId], references: [id])
  vendorId  String     @db.ObjectId
  party     Party     @relation(fields: [partyId], references: [id])
  partyId   String     @db.ObjectId
  driver    Driver     @relation(fields: [driverId], references: [id])
  driverId  String     @db.ObjectId
  truck Truck @relation(fields: [truckId], references: [id])
  truckId String @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
  userId  String     @db.ObjectId

  expenses Expense[]
  //transactions of the Trip
  transactions TripTransaction[]
}

model Expense{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  amount Float
  expenseType ExpenseType
  trip Trip @relation(fields: [tripId], references: [id])
  tripId String @db.ObjectId
}

model TripTransaction{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  trip Trip @relation(fields: [tripId], references: [id])
  tripId String @db.ObjectId
  amount Float
  tripTransactionType TripTransactionType
  transactionType TransactionType
  transactionDate DateTime
  transactionMode TransactionMode
  transactionDescription String
}

enum TripStatus {
  PLANNED
  COMPLETED
  POD_RECEIVED
  POD_SUBMITTED
  SETTLED
  CANCELLED
}

enum TransactionType{
  CREDIT
  DEBIT
}

enum TripTransactionType{
  FREIGHT
  ADVANCE
  CHARGE
  PAYMENT
  EXPENSE
  SETTLEMENT
}

enum ExpenseType{
  Brokerage
  Detention_Charges
  Driver_Bhatta
  Driver_Payment
  Fuel_Expense
  Loading_Charges
  Unloading_Charges
  Toll_Expense
  RTO_Expense
  Repair_Expense
  Weight_Charges
  Police_Charges
  Truck_Hire_Cost
}

enum TransactionMode{
  CASH
  UPI
  NETBANKING
  CHEQUE
  BANKTRANSFER
  FUEL
  OTHER
}

enum DriverStatus{
  ONTRIP
  AVAILABLE
}

enum TruckStatus{
  ONTRIP
  AVAILABLE
}

enum TruckType{
  MINI_TRUCK
  OPEN_BODY_TRUCK
  CLOSE_CONTAINER
  TRAILER
  TANKER
  TIPPER
  OTHER
}

enum TruckOwnership{
  MARKET_TRUCK
  MY_TRUCK
}